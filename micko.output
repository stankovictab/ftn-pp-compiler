Grammar

    0 $accept: program $end

    1 program: global_list function_list

    2 global_list: %empty
    3            | global_list global_var

    4 global_var: TYPE ID SEMICOLON

    5 function_list: function
    6              | function_list function

    7 $@1: %empty

    8 $@2: %empty

    9 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN body

   10 $@3: %empty

   11 $@4: %empty

   12 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN body

   13 parameters_full: %empty
   14                | parameters

   15 parameters: parameter
   16           | parameters COMMA parameter

   17 parameter: TYPE ID

   18 $@5: %empty

   19 body: LCURLYBRACKET variable_list $@5 statement_list RCURLYBRACKET

   20 variable_list: %empty
   21              | variable_list variables_def_line

   22 $@6: %empty

   23 variables_def_line: TYPE $@6 variables_only SEMICOLON

   24 variables_only: ID
   25               | variables_only COMMA ID

   26 statement_list: %empty
   27               | statement_list statement

   28 statement: compound_statement
   29          | assignment_statement
   30          | function_call SEMICOLON
   31          | if_statement
   32          | return_statement
   33          | increment_statement
   34          | loop
   35          | switch_statement

   36 $@7: %empty

   37 compound_statement: LCURLYBRACKET $@7 variable_list statement_list RCURLYBRACKET

   38 assignment_statement: ID ASSIGN num_exp SEMICOLON

   39 num_exp: exp
   40        | num_exp AROP exp

   41 exp: literal
   42    | ID increment_optional
   43    | function_call
   44    | LPAREN num_exp RPAREN

   45 literal: INT_NUMBER
   46        | UINT_NUMBER

   47 increment_optional: %empty
   48                   | INCREMENT

   49 $@8: %empty

   50 function_call: ID $@8 LPAREN argument_list RPAREN

   51 argument_list: %empty
   52              | arguments

   53 arguments: num_exp
   54          | arguments COMMA num_exp

   55 if_statement: if_part
   56             | if_part ELSE statement

   57 @9: %empty

   58 $@10: %empty

   59 if_part: IF LPAREN @9 rel_exp $@10 RPAREN statement

   60 rel_exp: num_exp RELOP num_exp

   61 return_statement: RETURN num_exp SEMICOLON
   62                 | RETURN SEMICOLON

   63 increment_statement: ID INCREMENT SEMICOLON

   64 loop: loop_first_part loop_second_part

   65 loop_first_part: FOR LPAREN TYPE ID ASSIGN

   66 $@11: %empty

   67 loop_second_part: literal TO literal RPAREN $@11 statement

   68 $@12: %empty

   69 loop_second_part: literal TO literal STEP literal RPAREN $@12 statement

   70 $@13: %empty

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

   72 $@14: %empty

   73 case_list: CASETOKEN literal $@14 ARROW statement finish_optional

   74 $@15: %empty

   75 case_list: case_list CASETOKEN literal $@15 ARROW statement finish_optional

   76 finish_optional: %empty
   77                | FINISH SEMICOLON

   78 otherwise_optional: %empty
   79                   | OTHERWISE ARROW statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <i> (258) 4 9 17 23 65
    IF (259) 59
    ELSE (260) 56
    RETURN (261) 61 62
    ID <s> (262) 4 9 12 17 24 25 38 42 50 63 65 71
    INT_NUMBER <s> (263) 45
    UINT_NUMBER <s> (264) 46
    LPAREN (265) 9 12 44 50 59 65
    RPAREN (266) 9 12 44 50 59 67 69
    LCURLYBRACKET (267) 19 37 71
    RCURLYBRACKET (268) 19 37 71
    ASSIGN (269) 38 65
    SEMICOLON (270) 4 23 30 38 61 62 63 77
    AROP <i> (271) 40
    RELOP <i> (272) 60
    VOIDTYPE <i> (273) 12
    COMMA (274) 16 25 54
    INCREMENT (275) 48 63
    FOR (276) 65
    TO (277) 67 69
    STEP (278) 69
    SWITCH (279) 71
    CASETOKEN (280) 73 75
    ARROW (281) 73 75 79
    OTHERWISE (282) 79
    FINISH (283) 77
    LSQUAREBRACKET (284) 71
    RSQUAREBRACKET (285) 71
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    global_list (34)
        on left: 2 3
        on right: 1 3
    global_var (35)
        on left: 4
        on right: 3
    function_list (36)
        on left: 5 6
        on right: 1 6
    function (37)
        on left: 9 12
        on right: 5 6
    $@1 (38)
        on left: 7
        on right: 9
    $@2 (39)
        on left: 8
        on right: 9
    $@3 (40)
        on left: 10
        on right: 12
    $@4 (41)
        on left: 11
        on right: 12
    parameters_full (42)
        on left: 13 14
        on right: 9 12
    parameters (43)
        on left: 15 16
        on right: 14 16
    parameter (44)
        on left: 17
        on right: 15 16
    body (45)
        on left: 19
        on right: 9 12
    $@5 (46)
        on left: 18
        on right: 19
    variable_list (47)
        on left: 20 21
        on right: 19 21 37
    variables_def_line (48)
        on left: 23
        on right: 21
    $@6 (49)
        on left: 22
        on right: 23
    variables_only (50)
        on left: 24 25
        on right: 23 25
    statement_list (51)
        on left: 26 27
        on right: 19 27 37
    statement (52)
        on left: 28 29 30 31 32 33 34 35
        on right: 27 56 59 67 69 73 75 79
    compound_statement (53)
        on left: 37
        on right: 28
    $@7 (54)
        on left: 36
        on right: 37
    assignment_statement (55)
        on left: 38
        on right: 29
    num_exp <i> (56)
        on left: 39 40
        on right: 38 40 44 53 54 60 61
    exp <i> (57)
        on left: 41 42 43 44
        on right: 39 40
    literal <i> (58)
        on left: 45 46
        on right: 41 67 69 73 75
    increment_optional <i> (59)
        on left: 47 48
        on right: 42
    function_call <i> (60)
        on left: 50
        on right: 30 43
    $@8 (61)
        on left: 49
        on right: 50
    argument_list <i> (62)
        on left: 51 52
        on right: 50
    arguments <i> (63)
        on left: 53 54
        on right: 52 54
    if_statement (64)
        on left: 55 56
        on right: 31
    if_part <i> (65)
        on left: 59
        on right: 55 56
    @9 (66)
        on left: 57
        on right: 59
    $@10 (67)
        on left: 58
        on right: 59
    rel_exp <i> (68)
        on left: 60
        on right: 59
    return_statement (69)
        on left: 61 62
        on right: 32
    increment_statement (70)
        on left: 63
        on right: 33
    loop (71)
        on left: 64
        on right: 34
    loop_first_part (72)
        on left: 65
        on right: 64
    loop_second_part (73)
        on left: 67 69
        on right: 64
    $@11 (74)
        on left: 66
        on right: 67
    $@12 (75)
        on left: 68
        on right: 69
    switch_statement (76)
        on left: 71
        on right: 35
    $@13 (77)
        on left: 70
        on right: 71
    case_list (78)
        on left: 73 75
        on right: 71 75
    $@14 (79)
        on left: 72
        on right: 73
    $@15 (80)
        on left: 74
        on right: 75
    finish_optional (81)
        on left: 76 77
        on right: 73 75
    otherwise_optional (82)
        on left: 78 79
        on right: 71


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (global_list)

    program      go to state 1
    global_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_list . function_list
    3 global_list: global_list . global_var

    TYPE      shift, and go to state 4
    VOIDTYPE  shift, and go to state 5

    global_var     go to state 6
    function_list  go to state 7
    function       go to state 8


State 3

    0 $accept: program $end .

    $default  accept


State 4

    4 global_var: TYPE . ID SEMICOLON
    9 function: TYPE . ID $@1 LPAREN parameters_full $@2 RPAREN body

    ID  shift, and go to state 9


State 5

   12 function: VOIDTYPE . ID $@3 LPAREN parameters_full $@4 RPAREN body

    ID  shift, and go to state 10


State 6

    3 global_list: global_list global_var .

    $default  reduce using rule 3 (global_list)


State 7

    1 program: global_list function_list .
    6 function_list: function_list . function

    TYPE      shift, and go to state 11
    VOIDTYPE  shift, and go to state 5

    $default  reduce using rule 1 (program)

    function  go to state 12


State 8

    5 function_list: function .

    $default  reduce using rule 5 (function_list)


State 9

    4 global_var: TYPE ID . SEMICOLON
    9 function: TYPE ID . $@1 LPAREN parameters_full $@2 RPAREN body

    SEMICOLON  shift, and go to state 13

    $default  reduce using rule 7 ($@1)

    $@1  go to state 14


State 10

   12 function: VOIDTYPE ID . $@3 LPAREN parameters_full $@4 RPAREN body

    $default  reduce using rule 10 ($@3)

    $@3  go to state 15


State 11

    9 function: TYPE . ID $@1 LPAREN parameters_full $@2 RPAREN body

    ID  shift, and go to state 16


State 12

    6 function_list: function_list function .

    $default  reduce using rule 6 (function_list)


State 13

    4 global_var: TYPE ID SEMICOLON .

    $default  reduce using rule 4 (global_var)


State 14

    9 function: TYPE ID $@1 . LPAREN parameters_full $@2 RPAREN body

    LPAREN  shift, and go to state 17


State 15

   12 function: VOIDTYPE ID $@3 . LPAREN parameters_full $@4 RPAREN body

    LPAREN  shift, and go to state 18


State 16

    9 function: TYPE ID . $@1 LPAREN parameters_full $@2 RPAREN body

    $default  reduce using rule 7 ($@1)

    $@1  go to state 14


State 17

    9 function: TYPE ID $@1 LPAREN . parameters_full $@2 RPAREN body

    TYPE  shift, and go to state 19

    $default  reduce using rule 13 (parameters_full)

    parameters_full  go to state 20
    parameters       go to state 21
    parameter        go to state 22


State 18

   12 function: VOIDTYPE ID $@3 LPAREN . parameters_full $@4 RPAREN body

    TYPE  shift, and go to state 19

    $default  reduce using rule 13 (parameters_full)

    parameters_full  go to state 23
    parameters       go to state 21
    parameter        go to state 22


State 19

   17 parameter: TYPE . ID

    ID  shift, and go to state 24


State 20

    9 function: TYPE ID $@1 LPAREN parameters_full . $@2 RPAREN body

    $default  reduce using rule 8 ($@2)

    $@2  go to state 25


State 21

   14 parameters_full: parameters .
   16 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 26

    $default  reduce using rule 14 (parameters_full)


State 22

   15 parameters: parameter .

    $default  reduce using rule 15 (parameters)


State 23

   12 function: VOIDTYPE ID $@3 LPAREN parameters_full . $@4 RPAREN body

    $default  reduce using rule 11 ($@4)

    $@4  go to state 27


State 24

   17 parameter: TYPE ID .

    $default  reduce using rule 17 (parameter)


State 25

    9 function: TYPE ID $@1 LPAREN parameters_full $@2 . RPAREN body

    RPAREN  shift, and go to state 28


State 26

   16 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 19

    parameter  go to state 29


State 27

   12 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 . RPAREN body

    RPAREN  shift, and go to state 30


State 28

    9 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN . body

    LCURLYBRACKET  shift, and go to state 31

    body  go to state 32


State 29

   16 parameters: parameters COMMA parameter .

    $default  reduce using rule 16 (parameters)


State 30

   12 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN . body

    LCURLYBRACKET  shift, and go to state 31

    body  go to state 33


State 31

   19 body: LCURLYBRACKET . variable_list $@5 statement_list RCURLYBRACKET

    $default  reduce using rule 20 (variable_list)

    variable_list  go to state 34


State 32

    9 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN body .

    $default  reduce using rule 9 (function)


State 33

   12 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN body .

    $default  reduce using rule 12 (function)


State 34

   19 body: LCURLYBRACKET variable_list . $@5 statement_list RCURLYBRACKET
   21 variable_list: variable_list . variables_def_line

    TYPE  shift, and go to state 35

    $default  reduce using rule 18 ($@5)

    $@5                 go to state 36
    variables_def_line  go to state 37


State 35

   23 variables_def_line: TYPE . $@6 variables_only SEMICOLON

    $default  reduce using rule 22 ($@6)

    $@6  go to state 38


State 36

   19 body: LCURLYBRACKET variable_list $@5 . statement_list RCURLYBRACKET

    $default  reduce using rule 26 (statement_list)

    statement_list  go to state 39


State 37

   21 variable_list: variable_list variables_def_line .

    $default  reduce using rule 21 (variable_list)


State 38

   23 variables_def_line: TYPE $@6 . variables_only SEMICOLON

    ID  shift, and go to state 40

    variables_only  go to state 41


State 39

   19 body: LCURLYBRACKET variable_list $@5 statement_list . RCURLYBRACKET
   27 statement_list: statement_list . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    RCURLYBRACKET  shift, and go to state 46
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 49
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 40

   24 variables_only: ID .

    $default  reduce using rule 24 (variables_only)


State 41

   23 variables_def_line: TYPE $@6 variables_only . SEMICOLON
   25 variables_only: variables_only . COMMA ID

    SEMICOLON  shift, and go to state 60
    COMMA      shift, and go to state 61


State 42

   59 if_part: IF . LPAREN @9 rel_exp $@10 RPAREN statement

    LPAREN  shift, and go to state 62


State 43

   61 return_statement: RETURN . num_exp SEMICOLON
   62                 | RETURN . SEMICOLON

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66
    SEMICOLON    shift, and go to state 67

    num_exp        go to state 68
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71


State 44

   38 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   50 function_call: ID . $@8 LPAREN argument_list RPAREN
   63 increment_statement: ID . INCREMENT SEMICOLON

    ASSIGN     shift, and go to state 72
    INCREMENT  shift, and go to state 73

    $default  reduce using rule 49 ($@8)

    $@8  go to state 74


State 45

   37 compound_statement: LCURLYBRACKET . $@7 variable_list statement_list RCURLYBRACKET

    $default  reduce using rule 36 ($@7)

    $@7  go to state 75


State 46

   19 body: LCURLYBRACKET variable_list $@5 statement_list RCURLYBRACKET .

    $default  reduce using rule 19 (body)


State 47

   65 loop_first_part: FOR . LPAREN TYPE ID ASSIGN

    LPAREN  shift, and go to state 76


State 48

   71 switch_statement: SWITCH . LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    LSQUAREBRACKET  shift, and go to state 77


State 49

   27 statement_list: statement_list statement .

    $default  reduce using rule 27 (statement_list)


State 50

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 51

   29 statement: assignment_statement .

    $default  reduce using rule 29 (statement)


State 52

   30 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 78


State 53

   31 statement: if_statement .

    $default  reduce using rule 31 (statement)


State 54

   55 if_statement: if_part .
   56             | if_part . ELSE statement

    ELSE  shift, and go to state 79

    $default  reduce using rule 55 (if_statement)


State 55

   32 statement: return_statement .

    $default  reduce using rule 32 (statement)


State 56

   33 statement: increment_statement .

    $default  reduce using rule 33 (statement)


State 57

   34 statement: loop .

    $default  reduce using rule 34 (statement)


State 58

   64 loop: loop_first_part . loop_second_part

    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65

    literal           go to state 80
    loop_second_part  go to state 81


State 59

   35 statement: switch_statement .

    $default  reduce using rule 35 (statement)


State 60

   23 variables_def_line: TYPE $@6 variables_only SEMICOLON .

    $default  reduce using rule 23 (variables_def_line)


State 61

   25 variables_only: variables_only COMMA . ID

    ID  shift, and go to state 82


State 62

   59 if_part: IF LPAREN . @9 rel_exp $@10 RPAREN statement

    $default  reduce using rule 57 (@9)

    @9  go to state 83


State 63

   42 exp: ID . increment_optional
   50 function_call: ID . $@8 LPAREN argument_list RPAREN

    INCREMENT  shift, and go to state 84

    LPAREN    reduce using rule 49 ($@8)
    $default  reduce using rule 47 (increment_optional)

    increment_optional  go to state 85
    $@8                 go to state 74


State 64

   45 literal: INT_NUMBER .

    $default  reduce using rule 45 (literal)


State 65

   46 literal: UINT_NUMBER .

    $default  reduce using rule 46 (literal)


State 66

   44 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    num_exp        go to state 86
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71


State 67

   62 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 62 (return_statement)


State 68

   40 num_exp: num_exp . AROP exp
   61 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 87
    AROP       shift, and go to state 88


State 69

   39 num_exp: exp .

    $default  reduce using rule 39 (num_exp)


State 70

   41 exp: literal .

    $default  reduce using rule 41 (exp)


State 71

   43 exp: function_call .

    $default  reduce using rule 43 (exp)


State 72

   38 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    num_exp        go to state 89
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71


State 73

   63 increment_statement: ID INCREMENT . SEMICOLON

    SEMICOLON  shift, and go to state 90


State 74

   50 function_call: ID $@8 . LPAREN argument_list RPAREN

    LPAREN  shift, and go to state 91


State 75

   37 compound_statement: LCURLYBRACKET $@7 . variable_list statement_list RCURLYBRACKET

    $default  reduce using rule 20 (variable_list)

    variable_list  go to state 92


State 76

   65 loop_first_part: FOR LPAREN . TYPE ID ASSIGN

    TYPE  shift, and go to state 93


State 77

   71 switch_statement: SWITCH LSQUAREBRACKET . ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    ID  shift, and go to state 94


State 78

   30 statement: function_call SEMICOLON .

    $default  reduce using rule 30 (statement)


State 79

   56 if_statement: if_part ELSE . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 95
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 80

   67 loop_second_part: literal . TO literal RPAREN $@11 statement
   69                 | literal . TO literal STEP literal RPAREN $@12 statement

    TO  shift, and go to state 96


State 81

   64 loop: loop_first_part loop_second_part .

    $default  reduce using rule 64 (loop)


State 82

   25 variables_only: variables_only COMMA ID .

    $default  reduce using rule 25 (variables_only)


State 83

   59 if_part: IF LPAREN @9 . rel_exp $@10 RPAREN statement

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    num_exp        go to state 97
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71
    rel_exp        go to state 98


State 84

   48 increment_optional: INCREMENT .

    $default  reduce using rule 48 (increment_optional)


State 85

   42 exp: ID increment_optional .

    $default  reduce using rule 42 (exp)


State 86

   40 num_exp: num_exp . AROP exp
   44 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 99
    AROP    shift, and go to state 88


State 87

   61 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 61 (return_statement)


State 88

   40 num_exp: num_exp AROP . exp

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    exp            go to state 100
    literal        go to state 70
    function_call  go to state 71


State 89

   38 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   40 num_exp: num_exp . AROP exp

    SEMICOLON  shift, and go to state 101
    AROP       shift, and go to state 88


State 90

   63 increment_statement: ID INCREMENT SEMICOLON .

    $default  reduce using rule 63 (increment_statement)


State 91

   50 function_call: ID $@8 LPAREN . argument_list RPAREN

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    $default  reduce using rule 51 (argument_list)

    num_exp        go to state 102
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71
    argument_list  go to state 103
    arguments      go to state 104


State 92

   21 variable_list: variable_list . variables_def_line
   37 compound_statement: LCURLYBRACKET $@7 variable_list . statement_list RCURLYBRACKET

    TYPE  shift, and go to state 35

    $default  reduce using rule 26 (statement_list)

    variables_def_line  go to state 37
    statement_list      go to state 105


State 93

   65 loop_first_part: FOR LPAREN TYPE . ID ASSIGN

    ID  shift, and go to state 106


State 94

   71 switch_statement: SWITCH LSQUAREBRACKET ID . $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    $default  reduce using rule 70 ($@13)

    $@13  go to state 107


State 95

   56 if_statement: if_part ELSE statement .

    $default  reduce using rule 56 (if_statement)


State 96

   67 loop_second_part: literal TO . literal RPAREN $@11 statement
   69                 | literal TO . literal STEP literal RPAREN $@12 statement

    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65

    literal  go to state 108


State 97

   40 num_exp: num_exp . AROP exp
   60 rel_exp: num_exp . RELOP num_exp

    AROP   shift, and go to state 88
    RELOP  shift, and go to state 109


State 98

   59 if_part: IF LPAREN @9 rel_exp . $@10 RPAREN statement

    $default  reduce using rule 58 ($@10)

    $@10  go to state 110


State 99

   44 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 44 (exp)


State 100

   40 num_exp: num_exp AROP exp .

    $default  reduce using rule 40 (num_exp)


State 101

   38 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 38 (assignment_statement)


State 102

   40 num_exp: num_exp . AROP exp
   53 arguments: num_exp .

    AROP  shift, and go to state 88

    $default  reduce using rule 53 (arguments)


State 103

   50 function_call: ID $@8 LPAREN argument_list . RPAREN

    RPAREN  shift, and go to state 111


State 104

   52 argument_list: arguments .
   54 arguments: arguments . COMMA num_exp

    COMMA  shift, and go to state 112

    $default  reduce using rule 52 (argument_list)


State 105

   27 statement_list: statement_list . statement
   37 compound_statement: LCURLYBRACKET $@7 variable_list statement_list . RCURLYBRACKET

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    RCURLYBRACKET  shift, and go to state 113
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 49
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 106

   65 loop_first_part: FOR LPAREN TYPE ID . ASSIGN

    ASSIGN  shift, and go to state 114


State 107

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 . RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    RSQUAREBRACKET  shift, and go to state 115


State 108

   67 loop_second_part: literal TO literal . RPAREN $@11 statement
   69                 | literal TO literal . STEP literal RPAREN $@12 statement

    RPAREN  shift, and go to state 116
    STEP    shift, and go to state 117


State 109

   60 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    num_exp        go to state 118
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71


State 110

   59 if_part: IF LPAREN @9 rel_exp $@10 . RPAREN statement

    RPAREN  shift, and go to state 119


State 111

   50 function_call: ID $@8 LPAREN argument_list RPAREN .

    $default  reduce using rule 50 (function_call)


State 112

   54 arguments: arguments COMMA . num_exp

    ID           shift, and go to state 63
    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65
    LPAREN       shift, and go to state 66

    num_exp        go to state 120
    exp            go to state 69
    literal        go to state 70
    function_call  go to state 71


State 113

   37 compound_statement: LCURLYBRACKET $@7 variable_list statement_list RCURLYBRACKET .

    $default  reduce using rule 37 (compound_statement)


State 114

   65 loop_first_part: FOR LPAREN TYPE ID ASSIGN .

    $default  reduce using rule 65 (loop_first_part)


State 115

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET . LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    LCURLYBRACKET  shift, and go to state 121


State 116

   67 loop_second_part: literal TO literal RPAREN . $@11 statement

    $default  reduce using rule 66 ($@11)

    $@11  go to state 122


State 117

   69 loop_second_part: literal TO literal STEP . literal RPAREN $@12 statement

    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65

    literal  go to state 123


State 118

   40 num_exp: num_exp . AROP exp
   60 rel_exp: num_exp RELOP num_exp .

    AROP  shift, and go to state 88

    $default  reduce using rule 60 (rel_exp)


State 119

   59 if_part: IF LPAREN @9 rel_exp $@10 RPAREN . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 124
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 120

   40 num_exp: num_exp . AROP exp
   54 arguments: arguments COMMA num_exp .

    AROP  shift, and go to state 88

    $default  reduce using rule 54 (arguments)


State 121

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET . case_list otherwise_optional RCURLYBRACKET

    CASETOKEN  shift, and go to state 125

    case_list  go to state 126


State 122

   67 loop_second_part: literal TO literal RPAREN $@11 . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 127
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 123

   69 loop_second_part: literal TO literal STEP literal . RPAREN $@12 statement

    RPAREN  shift, and go to state 128


State 124

   59 if_part: IF LPAREN @9 rel_exp $@10 RPAREN statement .

    $default  reduce using rule 59 (if_part)


State 125

   73 case_list: CASETOKEN . literal $@14 ARROW statement finish_optional

    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65

    literal  go to state 129


State 126

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list . otherwise_optional RCURLYBRACKET
   75 case_list: case_list . CASETOKEN literal $@15 ARROW statement finish_optional

    CASETOKEN  shift, and go to state 130
    OTHERWISE  shift, and go to state 131

    $default  reduce using rule 78 (otherwise_optional)

    otherwise_optional  go to state 132


State 127

   67 loop_second_part: literal TO literal RPAREN $@11 statement .

    $default  reduce using rule 67 (loop_second_part)


State 128

   69 loop_second_part: literal TO literal STEP literal RPAREN . $@12 statement

    $default  reduce using rule 68 ($@12)

    $@12  go to state 133


State 129

   73 case_list: CASETOKEN literal . $@14 ARROW statement finish_optional

    $default  reduce using rule 72 ($@14)

    $@14  go to state 134


State 130

   75 case_list: case_list CASETOKEN . literal $@15 ARROW statement finish_optional

    INT_NUMBER   shift, and go to state 64
    UINT_NUMBER  shift, and go to state 65

    literal  go to state 135


State 131

   79 otherwise_optional: OTHERWISE . ARROW statement

    ARROW  shift, and go to state 136


State 132

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional . RCURLYBRACKET

    RCURLYBRACKET  shift, and go to state 137


State 133

   69 loop_second_part: literal TO literal STEP literal RPAREN $@12 . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 138
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 134

   73 case_list: CASETOKEN literal $@14 . ARROW statement finish_optional

    ARROW  shift, and go to state 139


State 135

   75 case_list: case_list CASETOKEN literal . $@15 ARROW statement finish_optional

    $default  reduce using rule 74 ($@15)

    $@15  go to state 140


State 136

   79 otherwise_optional: OTHERWISE ARROW . statement

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 141
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 137

   71 switch_statement: SWITCH LSQUAREBRACKET ID $@13 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET .

    $default  reduce using rule 71 (switch_statement)


State 138

   69 loop_second_part: literal TO literal STEP literal RPAREN $@12 statement .

    $default  reduce using rule 69 (loop_second_part)


State 139

   73 case_list: CASETOKEN literal $@14 ARROW . statement finish_optional

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 142
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 140

   75 case_list: case_list CASETOKEN literal $@15 . ARROW statement finish_optional

    ARROW  shift, and go to state 143


State 141

   79 otherwise_optional: OTHERWISE ARROW statement .

    $default  reduce using rule 79 (otherwise_optional)


State 142

   73 case_list: CASETOKEN literal $@14 ARROW statement . finish_optional

    FINISH  shift, and go to state 144

    $default  reduce using rule 76 (finish_optional)

    finish_optional  go to state 145


State 143

   75 case_list: case_list CASETOKEN literal $@15 ARROW . statement finish_optional

    IF             shift, and go to state 42
    RETURN         shift, and go to state 43
    ID             shift, and go to state 44
    LCURLYBRACKET  shift, and go to state 45
    FOR            shift, and go to state 47
    SWITCH         shift, and go to state 48

    statement             go to state 146
    compound_statement    go to state 50
    assignment_statement  go to state 51
    function_call         go to state 52
    if_statement          go to state 53
    if_part               go to state 54
    return_statement      go to state 55
    increment_statement   go to state 56
    loop                  go to state 57
    loop_first_part       go to state 58
    switch_statement      go to state 59


State 144

   77 finish_optional: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 147


State 145

   73 case_list: CASETOKEN literal $@14 ARROW statement finish_optional .

    $default  reduce using rule 73 (case_list)


State 146

   75 case_list: case_list CASETOKEN literal $@15 ARROW statement . finish_optional

    FINISH  shift, and go to state 144

    $default  reduce using rule 76 (finish_optional)

    finish_optional  go to state 148


State 147

   77 finish_optional: FINISH SEMICOLON .

    $default  reduce using rule 77 (finish_optional)


State 148

   75 case_list: case_list CASETOKEN literal $@15 ARROW statement finish_optional .

    $default  reduce using rule 75 (case_list)
