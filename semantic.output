Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN body

    7 $@3: %empty

    8 $@4: %empty

    9 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN body

   10 parameters_full: %empty
   11                | parameters

   12 parameters: parameter
   13           | parameters COMMA parameter

   14 parameter: TYPE ID

   15 body: LCURLYBRACKET variable_list statement_list RCURLYBRACKET

   16 variable_list: %empty
   17              | variable_list variables_def_line

   18 $@5: %empty

   19 variables_def_line: TYPE $@5 variables_only SEMICOLON

   20 variables_only: ID
   21               | variables_only COMMA ID

   22 statement_list: %empty
   23               | statement_list statement

   24 statement: compound_statement
   25          | assignment_statement
   26          | function_call SEMICOLON
   27          | if_statement
   28          | return_statement
   29          | increment_statement
   30          | loop
   31          | switch_statement

   32 compound_statement: body

   33 assignment_statement: ID ASSIGN num_exp SEMICOLON

   34 num_exp: exp
   35        | num_exp AROP exp

   36 exp: literal
   37    | ID increment_optional
   38    | function_call
   39    | LPAREN num_exp RPAREN

   40 literal: INT_NUMBER
   41        | UINT_NUMBER

   42 increment_optional: %empty
   43                   | INCREMENT

   44 $@6: %empty

   45 function_call: ID $@6 LPAREN argument_list RPAREN

   46 argument_list: %empty
   47              | arguments

   48 arguments: ID
   49          | arguments COMMA ID
   50          | literal
   51          | arguments COMMA literal

   52 if_statement: if_part
   53             | if_part ELSE statement

   54 if_part: IF LPAREN rel_exp RPAREN statement

   55 rel_exp: num_exp RELOP num_exp

   56 return_statement: RETURN num_exp SEMICOLON
   57                 | RETURN SEMICOLON

   58 increment_statement: ID INCREMENT SEMICOLON

   59 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal RPAREN statement
   60     | FOR LPAREN TYPE ID ASSIGN literal TO literal STEP literal RPAREN statement

   61 $@7: %empty

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

   63 $@8: %empty

   64 case_list: CASETOKEN literal $@8 ARROW statement finish_optional

   65 $@9: %empty

   66 case_list: case_list CASETOKEN literal $@9 ARROW statement finish_optional

   67 finish_optional: %empty
   68                | FINISH SEMICOLON

   69 otherwise_optional: %empty
   70                   | OTHERWISE ARROW statement


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    TYPE <i> (258) 6 14 19 59 60
    IF (259) 54
    ELSE (260) 53
    RETURN (261) 56 57
    ID <s> (262) 6 9 14 20 21 33 37 45 48 49 58 59 60 62
    INT_NUMBER <s> (263) 40
    UINT_NUMBER <s> (264) 41
    LPAREN (265) 6 9 39 45 54 59 60
    RPAREN (266) 6 9 39 45 54 59 60
    LCURLYBRACKET (267) 15 62
    RCURLYBRACKET (268) 15 62
    ASSIGN (269) 33 59 60
    SEMICOLON (270) 19 26 33 56 57 58 68
    AROP <i> (271) 35
    RELOP <i> (272) 55
    VOIDTYPE <i> (273) 9
    COMMA (274) 13 21 49 51
    INCREMENT (275) 43 58
    FOR (276) 59 60
    TO (277) 59 60
    STEP (278) 60
    SWITCH (279) 62
    CASETOKEN (280) 64 66
    ARROW (281) 64 66 70
    OTHERWISE (282) 70
    FINISH (283) 68
    LSQUAREBRACKET (284) 62
    RSQUAREBRACKET (285) 62
    ONLY_IF (286)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    function_list (34)
        on left: 2 3
        on right: 1 3
    function (35)
        on left: 6 9
        on right: 2 3
    $@1 (36)
        on left: 4
        on right: 6
    $@2 (37)
        on left: 5
        on right: 6
    $@3 (38)
        on left: 7
        on right: 9
    $@4 (39)
        on left: 8
        on right: 9
    parameters_full (40)
        on left: 10 11
        on right: 6 9
    parameters (41)
        on left: 12 13
        on right: 11 13
    parameter (42)
        on left: 14
        on right: 12 13
    body (43)
        on left: 15
        on right: 6 9 32
    variable_list (44)
        on left: 16 17
        on right: 15 17
    variables_def_line (45)
        on left: 19
        on right: 17
    $@5 (46)
        on left: 18
        on right: 19
    variables_only (47)
        on left: 20 21
        on right: 19 21
    statement_list (48)
        on left: 22 23
        on right: 15 23
    statement (49)
        on left: 24 25 26 27 28 29 30 31
        on right: 23 53 54 59 60 64 66 70
    compound_statement (50)
        on left: 32
        on right: 24
    assignment_statement (51)
        on left: 33
        on right: 25
    num_exp <i> (52)
        on left: 34 35
        on right: 33 35 39 55 56
    exp <i> (53)
        on left: 36 37 38 39
        on right: 34 35
    literal <i> (54)
        on left: 40 41
        on right: 36 50 51 59 60 64 66
    increment_optional (55)
        on left: 42 43
        on right: 37
    function_call <i> (56)
        on left: 45
        on right: 26 38
    $@6 (57)
        on left: 44
        on right: 45
    argument_list (58)
        on left: 46 47
        on right: 45
    arguments <i> (59)
        on left: 48 49 50 51
        on right: 47 49 51
    if_statement (60)
        on left: 52 53
        on right: 27
    if_part (61)
        on left: 54
        on right: 52 53
    rel_exp <i> (62)
        on left: 55
        on right: 54
    return_statement (63)
        on left: 56 57
        on right: 28
    increment_statement (64)
        on left: 58
        on right: 29
    loop (65)
        on left: 59 60
        on right: 30
    switch_statement (66)
        on left: 62
        on right: 31
    $@7 (67)
        on left: 61
        on right: 62
    case_list (68)
        on left: 64 66
        on right: 62 66
    $@8 (69)
        on left: 63
        on right: 64
    $@9 (70)
        on left: 65
        on right: 66
    finish_optional (71)
        on left: 67 68
        on right: 64 66
    otherwise_optional (72)
        on left: 69 70
        on right: 62


State 0

    0 $accept: . program $end

    TYPE      shift, and go to state 1
    VOIDTYPE  shift, and go to state 2

    program        go to state 3
    function_list  go to state 4
    function       go to state 5


State 1

    6 function: TYPE . ID $@1 LPAREN parameters_full $@2 RPAREN body

    ID  shift, and go to state 6


State 2

    9 function: VOIDTYPE . ID $@3 LPAREN parameters_full $@4 RPAREN body

    ID  shift, and go to state 7


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: function_list .
    3 function_list: function_list . function

    TYPE      shift, and go to state 1
    VOIDTYPE  shift, and go to state 2

    $default  reduce using rule 1 (program)

    function  go to state 9


State 5

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 6

    6 function: TYPE ID . $@1 LPAREN parameters_full $@2 RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 10


State 7

    9 function: VOIDTYPE ID . $@3 LPAREN parameters_full $@4 RPAREN body

    $default  reduce using rule 7 ($@3)

    $@3  go to state 11


State 8

    0 $accept: program $end .

    $default  accept


State 9

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 10

    6 function: TYPE ID $@1 . LPAREN parameters_full $@2 RPAREN body

    LPAREN  shift, and go to state 12


State 11

    9 function: VOIDTYPE ID $@3 . LPAREN parameters_full $@4 RPAREN body

    LPAREN  shift, and go to state 13


State 12

    6 function: TYPE ID $@1 LPAREN . parameters_full $@2 RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 10 (parameters_full)

    parameters_full  go to state 15
    parameters       go to state 16
    parameter        go to state 17


State 13

    9 function: VOIDTYPE ID $@3 LPAREN . parameters_full $@4 RPAREN body

    TYPE  shift, and go to state 14

    $default  reduce using rule 10 (parameters_full)

    parameters_full  go to state 18
    parameters       go to state 16
    parameter        go to state 17


State 14

   14 parameter: TYPE . ID

    ID  shift, and go to state 19


State 15

    6 function: TYPE ID $@1 LPAREN parameters_full . $@2 RPAREN body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 20


State 16

   11 parameters_full: parameters .
   13 parameters: parameters . COMMA parameter

    COMMA  shift, and go to state 21

    $default  reduce using rule 11 (parameters_full)


State 17

   12 parameters: parameter .

    $default  reduce using rule 12 (parameters)


State 18

    9 function: VOIDTYPE ID $@3 LPAREN parameters_full . $@4 RPAREN body

    $default  reduce using rule 8 ($@4)

    $@4  go to state 22


State 19

   14 parameter: TYPE ID .

    $default  reduce using rule 14 (parameter)


State 20

    6 function: TYPE ID $@1 LPAREN parameters_full $@2 . RPAREN body

    RPAREN  shift, and go to state 23


State 21

   13 parameters: parameters COMMA . parameter

    TYPE  shift, and go to state 14

    parameter  go to state 24


State 22

    9 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 . RPAREN body

    RPAREN  shift, and go to state 25


State 23

    6 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN . body

    LCURLYBRACKET  shift, and go to state 26

    body  go to state 27


State 24

   13 parameters: parameters COMMA parameter .

    $default  reduce using rule 13 (parameters)


State 25

    9 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN . body

    LCURLYBRACKET  shift, and go to state 26

    body  go to state 28


State 26

   15 body: LCURLYBRACKET . variable_list statement_list RCURLYBRACKET

    $default  reduce using rule 16 (variable_list)

    variable_list  go to state 29


State 27

    6 function: TYPE ID $@1 LPAREN parameters_full $@2 RPAREN body .

    $default  reduce using rule 6 (function)


State 28

    9 function: VOIDTYPE ID $@3 LPAREN parameters_full $@4 RPAREN body .

    $default  reduce using rule 9 (function)


State 29

   15 body: LCURLYBRACKET variable_list . statement_list RCURLYBRACKET
   17 variable_list: variable_list . variables_def_line

    TYPE  shift, and go to state 30

    $default  reduce using rule 22 (statement_list)

    variables_def_line  go to state 31
    statement_list      go to state 32


State 30

   19 variables_def_line: TYPE . $@5 variables_only SEMICOLON

    $default  reduce using rule 18 ($@5)

    $@5  go to state 33


State 31

   17 variable_list: variable_list variables_def_line .

    $default  reduce using rule 17 (variable_list)


State 32

   15 body: LCURLYBRACKET variable_list statement_list . RCURLYBRACKET
   23 statement_list: statement_list . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    RCURLYBRACKET  shift, and go to state 37
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 41
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 33

   19 variables_def_line: TYPE $@5 . variables_only SEMICOLON

    ID  shift, and go to state 51

    variables_only  go to state 52


State 34

   54 if_part: IF . LPAREN rel_exp RPAREN statement

    LPAREN  shift, and go to state 53


State 35

   56 return_statement: RETURN . num_exp SEMICOLON
   57                 | RETURN . SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57
    SEMICOLON    shift, and go to state 58

    num_exp        go to state 59
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 36

   33 assignment_statement: ID . ASSIGN num_exp SEMICOLON
   45 function_call: ID . $@6 LPAREN argument_list RPAREN
   58 increment_statement: ID . INCREMENT SEMICOLON

    ASSIGN     shift, and go to state 63
    INCREMENT  shift, and go to state 64

    $default  reduce using rule 44 ($@6)

    $@6  go to state 65


State 37

   15 body: LCURLYBRACKET variable_list statement_list RCURLYBRACKET .

    $default  reduce using rule 15 (body)


State 38

   59 loop: FOR . LPAREN TYPE ID ASSIGN literal TO literal RPAREN statement
   60     | FOR . LPAREN TYPE ID ASSIGN literal TO literal STEP literal RPAREN statement

    LPAREN  shift, and go to state 66


State 39

   62 switch_statement: SWITCH . LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    LSQUAREBRACKET  shift, and go to state 67


State 40

   32 compound_statement: body .

    $default  reduce using rule 32 (compound_statement)


State 41

   23 statement_list: statement_list statement .

    $default  reduce using rule 23 (statement_list)


State 42

   24 statement: compound_statement .

    $default  reduce using rule 24 (statement)


State 43

   25 statement: assignment_statement .

    $default  reduce using rule 25 (statement)


State 44

   26 statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 68


State 45

   27 statement: if_statement .

    $default  reduce using rule 27 (statement)


State 46

   52 if_statement: if_part .
   53             | if_part . ELSE statement

    ELSE  shift, and go to state 69

    $default  reduce using rule 52 (if_statement)


State 47

   28 statement: return_statement .

    $default  reduce using rule 28 (statement)


State 48

   29 statement: increment_statement .

    $default  reduce using rule 29 (statement)


State 49

   30 statement: loop .

    $default  reduce using rule 30 (statement)


State 50

   31 statement: switch_statement .

    $default  reduce using rule 31 (statement)


State 51

   20 variables_only: ID .

    $default  reduce using rule 20 (variables_only)


State 52

   19 variables_def_line: TYPE $@5 variables_only . SEMICOLON
   21 variables_only: variables_only . COMMA ID

    SEMICOLON  shift, and go to state 70
    COMMA      shift, and go to state 71


State 53

   54 if_part: IF LPAREN . rel_exp RPAREN statement

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57

    num_exp        go to state 72
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    rel_exp        go to state 73


State 54

   37 exp: ID . increment_optional
   45 function_call: ID . $@6 LPAREN argument_list RPAREN

    INCREMENT  shift, and go to state 74

    LPAREN    reduce using rule 44 ($@6)
    $default  reduce using rule 42 (increment_optional)

    increment_optional  go to state 75
    $@6                 go to state 65


State 55

   40 literal: INT_NUMBER .

    $default  reduce using rule 40 (literal)


State 56

   41 literal: UINT_NUMBER .

    $default  reduce using rule 41 (literal)


State 57

   39 exp: LPAREN . num_exp RPAREN

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57

    num_exp        go to state 76
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 58

   57 return_statement: RETURN SEMICOLON .

    $default  reduce using rule 57 (return_statement)


State 59

   35 num_exp: num_exp . AROP exp
   56 return_statement: RETURN num_exp . SEMICOLON

    SEMICOLON  shift, and go to state 77
    AROP       shift, and go to state 78


State 60

   34 num_exp: exp .

    $default  reduce using rule 34 (num_exp)


State 61

   36 exp: literal .

    $default  reduce using rule 36 (exp)


State 62

   38 exp: function_call .

    $default  reduce using rule 38 (exp)


State 63

   33 assignment_statement: ID ASSIGN . num_exp SEMICOLON

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57

    num_exp        go to state 79
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 64

   58 increment_statement: ID INCREMENT . SEMICOLON

    SEMICOLON  shift, and go to state 80


State 65

   45 function_call: ID $@6 . LPAREN argument_list RPAREN

    LPAREN  shift, and go to state 81


State 66

   59 loop: FOR LPAREN . TYPE ID ASSIGN literal TO literal RPAREN statement
   60     | FOR LPAREN . TYPE ID ASSIGN literal TO literal STEP literal RPAREN statement

    TYPE  shift, and go to state 82


State 67

   62 switch_statement: SWITCH LSQUAREBRACKET . ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    ID  shift, and go to state 83


State 68

   26 statement: function_call SEMICOLON .

    $default  reduce using rule 26 (statement)


State 69

   53 if_statement: if_part ELSE . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 84
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 70

   19 variables_def_line: TYPE $@5 variables_only SEMICOLON .

    $default  reduce using rule 19 (variables_def_line)


State 71

   21 variables_only: variables_only COMMA . ID

    ID  shift, and go to state 85


State 72

   35 num_exp: num_exp . AROP exp
   55 rel_exp: num_exp . RELOP num_exp

    AROP   shift, and go to state 78
    RELOP  shift, and go to state 86


State 73

   54 if_part: IF LPAREN rel_exp . RPAREN statement

    RPAREN  shift, and go to state 87


State 74

   43 increment_optional: INCREMENT .

    $default  reduce using rule 43 (increment_optional)


State 75

   37 exp: ID increment_optional .

    $default  reduce using rule 37 (exp)


State 76

   35 num_exp: num_exp . AROP exp
   39 exp: LPAREN num_exp . RPAREN

    RPAREN  shift, and go to state 88
    AROP    shift, and go to state 78


State 77

   56 return_statement: RETURN num_exp SEMICOLON .

    $default  reduce using rule 56 (return_statement)


State 78

   35 num_exp: num_exp AROP . exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57

    exp            go to state 89
    literal        go to state 61
    function_call  go to state 62


State 79

   33 assignment_statement: ID ASSIGN num_exp . SEMICOLON
   35 num_exp: num_exp . AROP exp

    SEMICOLON  shift, and go to state 90
    AROP       shift, and go to state 78


State 80

   58 increment_statement: ID INCREMENT SEMICOLON .

    $default  reduce using rule 58 (increment_statement)


State 81

   45 function_call: ID $@6 LPAREN . argument_list RPAREN

    ID           shift, and go to state 91
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    $default  reduce using rule 46 (argument_list)

    literal        go to state 92
    argument_list  go to state 93
    arguments      go to state 94


State 82

   59 loop: FOR LPAREN TYPE . ID ASSIGN literal TO literal RPAREN statement
   60     | FOR LPAREN TYPE . ID ASSIGN literal TO literal STEP literal RPAREN statement

    ID  shift, and go to state 95


State 83

   62 switch_statement: SWITCH LSQUAREBRACKET ID . $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    $default  reduce using rule 61 ($@7)

    $@7  go to state 96


State 84

   53 if_statement: if_part ELSE statement .

    $default  reduce using rule 53 (if_statement)


State 85

   21 variables_only: variables_only COMMA ID .

    $default  reduce using rule 21 (variables_only)


State 86

   55 rel_exp: num_exp RELOP . num_exp

    ID           shift, and go to state 54
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56
    LPAREN       shift, and go to state 57

    num_exp        go to state 97
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 87

   54 if_part: IF LPAREN rel_exp RPAREN . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 98
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 88

   39 exp: LPAREN num_exp RPAREN .

    $default  reduce using rule 39 (exp)


State 89

   35 num_exp: num_exp AROP exp .

    $default  reduce using rule 35 (num_exp)


State 90

   33 assignment_statement: ID ASSIGN num_exp SEMICOLON .

    $default  reduce using rule 33 (assignment_statement)


State 91

   48 arguments: ID .

    $default  reduce using rule 48 (arguments)


State 92

   50 arguments: literal .

    $default  reduce using rule 50 (arguments)


State 93

   45 function_call: ID $@6 LPAREN argument_list . RPAREN

    RPAREN  shift, and go to state 99


State 94

   47 argument_list: arguments .
   49 arguments: arguments . COMMA ID
   51          | arguments . COMMA literal

    COMMA  shift, and go to state 100

    $default  reduce using rule 47 (argument_list)


State 95

   59 loop: FOR LPAREN TYPE ID . ASSIGN literal TO literal RPAREN statement
   60     | FOR LPAREN TYPE ID . ASSIGN literal TO literal STEP literal RPAREN statement

    ASSIGN  shift, and go to state 101


State 96

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 . RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    RSQUAREBRACKET  shift, and go to state 102


State 97

   35 num_exp: num_exp . AROP exp
   55 rel_exp: num_exp RELOP num_exp .

    AROP  shift, and go to state 78

    $default  reduce using rule 55 (rel_exp)


State 98

   54 if_part: IF LPAREN rel_exp RPAREN statement .

    $default  reduce using rule 54 (if_part)


State 99

   45 function_call: ID $@6 LPAREN argument_list RPAREN .

    $default  reduce using rule 45 (function_call)


State 100

   49 arguments: arguments COMMA . ID
   51          | arguments COMMA . literal

    ID           shift, and go to state 103
    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 104


State 101

   59 loop: FOR LPAREN TYPE ID ASSIGN . literal TO literal RPAREN statement
   60     | FOR LPAREN TYPE ID ASSIGN . literal TO literal STEP literal RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 105


State 102

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET . LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET

    LCURLYBRACKET  shift, and go to state 106


State 103

   49 arguments: arguments COMMA ID .

    $default  reduce using rule 49 (arguments)


State 104

   51 arguments: arguments COMMA literal .

    $default  reduce using rule 51 (arguments)


State 105

   59 loop: FOR LPAREN TYPE ID ASSIGN literal . TO literal RPAREN statement
   60     | FOR LPAREN TYPE ID ASSIGN literal . TO literal STEP literal RPAREN statement

    TO  shift, and go to state 107


State 106

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET . case_list otherwise_optional RCURLYBRACKET

    CASETOKEN  shift, and go to state 108

    case_list  go to state 109


State 107

   59 loop: FOR LPAREN TYPE ID ASSIGN literal TO . literal RPAREN statement
   60     | FOR LPAREN TYPE ID ASSIGN literal TO . literal STEP literal RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 110


State 108

   64 case_list: CASETOKEN . literal $@8 ARROW statement finish_optional

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 111


State 109

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list . otherwise_optional RCURLYBRACKET
   66 case_list: case_list . CASETOKEN literal $@9 ARROW statement finish_optional

    CASETOKEN  shift, and go to state 112
    OTHERWISE  shift, and go to state 113

    $default  reduce using rule 69 (otherwise_optional)

    otherwise_optional  go to state 114


State 110

   59 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal . RPAREN statement
   60     | FOR LPAREN TYPE ID ASSIGN literal TO literal . STEP literal RPAREN statement

    RPAREN  shift, and go to state 115
    STEP    shift, and go to state 116


State 111

   64 case_list: CASETOKEN literal . $@8 ARROW statement finish_optional

    $default  reduce using rule 63 ($@8)

    $@8  go to state 117


State 112

   66 case_list: case_list CASETOKEN . literal $@9 ARROW statement finish_optional

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 118


State 113

   70 otherwise_optional: OTHERWISE . ARROW statement

    ARROW  shift, and go to state 119


State 114

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional . RCURLYBRACKET

    RCURLYBRACKET  shift, and go to state 120


State 115

   59 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal RPAREN . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 121
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 116

   60 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal STEP . literal RPAREN statement

    INT_NUMBER   shift, and go to state 55
    UINT_NUMBER  shift, and go to state 56

    literal  go to state 122


State 117

   64 case_list: CASETOKEN literal $@8 . ARROW statement finish_optional

    ARROW  shift, and go to state 123


State 118

   66 case_list: case_list CASETOKEN literal . $@9 ARROW statement finish_optional

    $default  reduce using rule 65 ($@9)

    $@9  go to state 124


State 119

   70 otherwise_optional: OTHERWISE ARROW . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 125
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 120

   62 switch_statement: SWITCH LSQUAREBRACKET ID $@7 RSQUAREBRACKET LCURLYBRACKET case_list otherwise_optional RCURLYBRACKET .

    $default  reduce using rule 62 (switch_statement)


State 121

   59 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal RPAREN statement .

    $default  reduce using rule 59 (loop)


State 122

   60 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal STEP literal . RPAREN statement

    RPAREN  shift, and go to state 126


State 123

   64 case_list: CASETOKEN literal $@8 ARROW . statement finish_optional

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 127
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 124

   66 case_list: case_list CASETOKEN literal $@9 . ARROW statement finish_optional

    ARROW  shift, and go to state 128


State 125

   70 otherwise_optional: OTHERWISE ARROW statement .

    $default  reduce using rule 70 (otherwise_optional)


State 126

   60 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal STEP literal RPAREN . statement

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 129
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 127

   64 case_list: CASETOKEN literal $@8 ARROW statement . finish_optional

    FINISH  shift, and go to state 130

    $default  reduce using rule 67 (finish_optional)

    finish_optional  go to state 131


State 128

   66 case_list: case_list CASETOKEN literal $@9 ARROW . statement finish_optional

    IF             shift, and go to state 34
    RETURN         shift, and go to state 35
    ID             shift, and go to state 36
    LCURLYBRACKET  shift, and go to state 26
    FOR            shift, and go to state 38
    SWITCH         shift, and go to state 39

    body                  go to state 40
    statement             go to state 132
    compound_statement    go to state 42
    assignment_statement  go to state 43
    function_call         go to state 44
    if_statement          go to state 45
    if_part               go to state 46
    return_statement      go to state 47
    increment_statement   go to state 48
    loop                  go to state 49
    switch_statement      go to state 50


State 129

   60 loop: FOR LPAREN TYPE ID ASSIGN literal TO literal STEP literal RPAREN statement .

    $default  reduce using rule 60 (loop)


State 130

   68 finish_optional: FINISH . SEMICOLON

    SEMICOLON  shift, and go to state 133


State 131

   64 case_list: CASETOKEN literal $@8 ARROW statement finish_optional .

    $default  reduce using rule 64 (case_list)


State 132

   66 case_list: case_list CASETOKEN literal $@9 ARROW statement . finish_optional

    FINISH  shift, and go to state 130

    $default  reduce using rule 67 (finish_optional)

    finish_optional  go to state 134


State 133

   68 finish_optional: FINISH SEMICOLON .

    $default  reduce using rule 68 (finish_optional)


State 134

   66 case_list: case_list CASETOKEN literal $@9 ARROW statement finish_optional .

    $default  reduce using rule 66 (case_list)
